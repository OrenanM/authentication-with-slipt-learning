# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import proto.fedsplit_communication_pb2 as fedsplit__communication__pb2

GRPC_GENERATED_VERSION = '1.75.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in fedsplit_communication_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TrainServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTrainResponse = channel.unary_unary(
                '/fedsplit_communication.TrainServer/GetTrainResponse',
                request_serializer=fedsplit__communication__pb2.Embedding.SerializeToString,
                response_deserializer=fedsplit__communication__pb2.Gradients.FromString,
                _registered_method=True)


class TrainServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetTrainResponse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrainServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTrainResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTrainResponse,
                    request_deserializer=fedsplit__communication__pb2.Embedding.FromString,
                    response_serializer=fedsplit__communication__pb2.Gradients.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fedsplit_communication.TrainServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('fedsplit_communication.TrainServer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TrainServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetTrainResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fedsplit_communication.TrainServer/GetTrainResponse',
            fedsplit__communication__pb2.Embedding.SerializeToString,
            fedsplit__communication__pb2.Gradients.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AggregateStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AggregateModels = channel.unary_unary(
                '/fedsplit_communication.Aggregate/AggregateModels',
                request_serializer=fedsplit__communication__pb2.Models.SerializeToString,
                response_deserializer=fedsplit__communication__pb2.Models.FromString,
                _registered_method=True)


class AggregateServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AggregateModels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AggregateServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AggregateModels': grpc.unary_unary_rpc_method_handler(
                    servicer.AggregateModels,
                    request_deserializer=fedsplit__communication__pb2.Models.FromString,
                    response_serializer=fedsplit__communication__pb2.Models.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fedsplit_communication.Aggregate', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('fedsplit_communication.Aggregate', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Aggregate(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AggregateModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fedsplit_communication.Aggregate/AggregateModels',
            fedsplit__communication__pb2.Models.SerializeToString,
            fedsplit__communication__pb2.Models.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ReturnServerModelStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetServerModel = channel.unary_unary(
                '/fedsplit_communication.ReturnServerModel/GetServerModel',
                request_serializer=fedsplit__communication__pb2.Empty.SerializeToString,
                response_deserializer=fedsplit__communication__pb2.Models.FromString,
                _registered_method=True)


class ReturnServerModelServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetServerModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReturnServerModelServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetServerModel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServerModel,
                    request_deserializer=fedsplit__communication__pb2.Empty.FromString,
                    response_serializer=fedsplit__communication__pb2.Models.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fedsplit_communication.ReturnServerModel', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('fedsplit_communication.ReturnServerModel', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ReturnServerModel(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetServerModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fedsplit_communication.ReturnServerModel/GetServerModel',
            fedsplit__communication__pb2.Empty.SerializeToString,
            fedsplit__communication__pb2.Models.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class BackwardStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetBackwardResponse = channel.unary_unary(
                '/fedsplit_communication.Backward/GetBackwardResponse',
                request_serializer=fedsplit__communication__pb2.Gradients.SerializeToString,
                response_deserializer=fedsplit__communication__pb2.Gradients.FromString,
                _registered_method=True)


class BackwardServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetBackwardResponse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BackwardServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetBackwardResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBackwardResponse,
                    request_deserializer=fedsplit__communication__pb2.Gradients.FromString,
                    response_serializer=fedsplit__communication__pb2.Gradients.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fedsplit_communication.Backward', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('fedsplit_communication.Backward', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Backward(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetBackwardResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fedsplit_communication.Backward/GetBackwardResponse',
            fedsplit__communication__pb2.Gradients.SerializeToString,
            fedsplit__communication__pb2.Gradients.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class SendModelGlobalStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReceiveGlobalModel = channel.unary_unary(
                '/fedsplit_communication.SendModelGlobal/ReceiveGlobalModel',
                request_serializer=fedsplit__communication__pb2.Gradients.SerializeToString,
                response_deserializer=fedsplit__communication__pb2.Gradients.FromString,
                _registered_method=True)


class SendModelGlobalServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReceiveGlobalModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SendModelGlobalServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReceiveGlobalModel': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceiveGlobalModel,
                    request_deserializer=fedsplit__communication__pb2.Gradients.FromString,
                    response_serializer=fedsplit__communication__pb2.Gradients.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fedsplit_communication.SendModelGlobal', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('fedsplit_communication.SendModelGlobal', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SendModelGlobal(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReceiveGlobalModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/fedsplit_communication.SendModelGlobal/ReceiveGlobalModel',
            fedsplit__communication__pb2.Gradients.SerializeToString,
            fedsplit__communication__pb2.Gradients.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
